function name: valueToBytes
   0.case
     *ast.SelectorExpr 	 [reflect Bool]
     *ast.IfStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [val Bool]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CompositeLit -> *ast.ArrayType 	 [byte]
     *ast.BasicLit 	 [INT 1]
      	 [nil]
     *ast.ReturnStmt -> *ast.CompositeLit -> *ast.ArrayType 	 [byte]
     *ast.BasicLit 	 [INT 0]
      	 [nil]
   1.case
     *ast.SelectorExpr 	 [reflect Uint]
     *ast.SwitchStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Sizeof]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.CallExpr -> *ast.SelectorExpr 	 [val UnsafeAddr]
     *ast.BlockStmt -> *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 8 x uint8]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 16 x uint16]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 32 x uint32]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 64 x uint64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.ReturnStmt 	 [default nil ErrUnsupportedUints]
   2.case
     *ast.SelectorExpr 	 [reflect Int]
     *ast.SwitchStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Sizeof]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.CallExpr -> *ast.SelectorExpr 	 [val UnsafeAddr]
     *ast.BlockStmt -> *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 8 x uint8]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 16 x uint16]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 32 x uint32]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.BasicLit -> *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [INT 64 x uint64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Convert]
     *ast.CallExpr -> *ast.SelectorExpr 	 [reflect TypeOf]
      	 [x]
     *ast.CaseClause -> *ast.ReturnStmt 	 [default nil ErrUnsupportedInts]
   3.case
     *ast.SelectorExpr 	 [reflect Int8]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x int8]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [int8]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 1 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   4.case
     *ast.SelectorExpr 	 [reflect Uint8]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x uint8]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [uint8]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 1 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   5.case
     *ast.SelectorExpr 	 [reflect Int16]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x int16]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [int16]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 2 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   6.case
     *ast.SelectorExpr 	 [reflect Uint16]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x uint16]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [uint16]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 2 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   7.case
     *ast.SelectorExpr 	 [reflect Int32]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x int32]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [int32]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 4 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   8.case
     *ast.SelectorExpr 	 [reflect Uint32]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x uint32]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [uint32]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 4 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   9.case
     *ast.SelectorExpr 	 [reflect Float32]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x float32]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [float32]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 4 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   10.case
     *ast.SelectorExpr 	 [reflect Int64]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x int64]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [int64]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 8 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   11.case
     *ast.SelectorExpr 	 [reflect Uint64]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x uint64]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [uint64]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 8 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   12.case
     *ast.SelectorExpr 	 [reflect Float64]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x float64]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [float64]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 8 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   13.case
     *ast.SelectorExpr 	 [reflect Complex64]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x complex64]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [complex64]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 8 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   14.case
     *ast.SelectorExpr 	 [reflect Complex128]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec 	 [x complex128]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [= x val Interface]
      	 [complex128]
     *ast.AssignStmt -> *ast.SliceExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType -> *ast.BasicLit 	 [:= memory INT 16 byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafe Pointer]
     *ast.UnaryExpr 	 [& x]
     *ast.ReturnStmt -> *ast.CallExpr 	 [copyOf memory]
      	 [nil]
   15.case
     *ast.SelectorExpr 	 [reflect Ptr]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [valueToBytes val Elem]
   16.case
     *ast.SelectorExpr 	 [reflect Array]
     *ast.SelectorExpr 	 [reflect Slice]
     *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [== val Len]
     *ast.BasicLit 	 [INT 0]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CompositeLit -> *ast.ArrayType 	 [byte]
      	 [nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= kind val Index]
     *ast.BasicLit 	 [INT 0]
      	 [Kind]
     *ast.IfStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.SelectorExpr 	 [|| || == kind reflect Array]
     *ast.BinaryExpr -> *ast.SelectorExpr 	 [== kind reflect Slice]
     *ast.BinaryExpr -> *ast.SelectorExpr 	 [== kind reflect String]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [nil fmt Errorf]
     *ast.BasicLit -> *ast.CallExpr -> *ast.SelectorExpr -> *ast.CallExpr -> *ast.SelectorExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [STRING "Slices and arrays of type %s is unsupported" val Index]
     *ast.BasicLit 	 [INT 0]
      	 [Type]
      	 [Name]
     *ast.DeclStmt -> *ast.GenDecl -> *ast.ValueSpec -> *ast.ArrayType 	 [allbytes byte]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.BasicLit 	 [:= i INT 0]
     *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [< i val Len]
     *ast.IncDecStmt 	 [i]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= morebytes err valueToBytes val Index]
      	 [i]
     *ast.IfStmt -> *ast.BinaryExpr 	 [!= err nil]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [nil err]
     *ast.AssignStmt -> *ast.CallExpr 	 [= allbytes append allbytes morebytes]
     *ast.ReturnStmt 	 [allbytes nil]
   17.case
     *ast.SelectorExpr 	 [reflect String]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.ArrayType 	 [byte]
     *ast.CallExpr -> *ast.SelectorExpr 	 [val String]
      	 [nil]


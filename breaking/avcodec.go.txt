{*ast.File [avcodec]}


{*ast.GenDecl -> *ast.ImportSpec -> *ast.BasicLit [STRING "C"]}
{*ast.GenDecl -> *ast.ImportSpec -> *ast.BasicLit [STRING "errors"]}
{*ast.ImportSpec -> *ast.BasicLit [STRING "strings"]}
{*ast.ImportSpec -> *ast.BasicLit [STRING "unsafe"]}
{*ast.ImportSpec -> *ast.BasicLit [STRING "github.com/imkira/go-libav/avutil"]}
{*ast.GenDecl -> *ast.ValueSpec [ErrAllocationError]}
{*ast.CallExpr -> *ast.SelectorExpr [errors New]}
{*ast.BasicLit [STRING "allocation error"]}
{*ast.ValueSpec [ErrEncoderNotFound]}
{*ast.CallExpr -> *ast.SelectorExpr [errors New]}
{*ast.BasicLit [STRING "encoder not found"]}
{*ast.ValueSpec [ErrDecoderNotFound]}
{*ast.CallExpr -> *ast.SelectorExpr [errors New]}
{*ast.BasicLit [STRING "decoder not found"]}
{*ast.ValueSpec [ErrBitStreamFilterNotFound]}
{*ast.CallExpr -> *ast.SelectorExpr [errors New]}
{*ast.BasicLit [STRING "bitstreamfilter not found"]}
{*ast.GenDecl -> *ast.TypeSpec [CodecID]}
{*ast.SelectorExpr [C enum_AVCodecID]}


{*ast.GenDecl -> *ast.ValueSpec [CodecIDNone CodecID]}
{*ast.SelectorExpr [C AV_CODEC_ID_NONE]}
{*ast.ValueSpec [CodecIDMJpeg CodecID]}
{*ast.SelectorExpr [C AV_CODEC_ID_MJPEG]}
{*ast.ValueSpec [CodecIDLJpeg CodecID]}
{*ast.SelectorExpr [C AV_CODEC_ID_LJPEG]}


{*ast.GenDecl -> *ast.TypeSpec [Flags int]}


{*ast.GenDecl -> *ast.ValueSpec [FlagUnaligned Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_UNALIGNED]}
{*ast.ValueSpec [FlagQScale Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_QSCALE]}
{*ast.ValueSpec [Flag4MV Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_4MV]}
{*ast.ValueSpec [FlagOutputCorrupt Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_OUTPUT_CORRUPT]}
{*ast.ValueSpec [FlagQPEL Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_QPEL]}
{*ast.ValueSpec [FlagPass1 Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_PASS1]}
{*ast.ValueSpec [FlagPass2 Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_PASS2]}
{*ast.ValueSpec [FlagGray Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_GRAY]}
{*ast.ValueSpec [FlagPSNR Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_PSNR]}
{*ast.ValueSpec [FlagTruncated Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_TRUNCATED]}
{*ast.ValueSpec [FlagInterlacedDCT Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_INTERLACED_DCT]}
{*ast.ValueSpec [FlagLowDelay Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_LOW_DELAY]}
{*ast.ValueSpec [FlagGlobalHeader Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_GLOBAL_HEADER]}
{*ast.ValueSpec [FlagBitExact Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_BITEXACT]}
{*ast.ValueSpec [FlagACPred Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_AC_PRED]}
{*ast.ValueSpec [FlagLoopFilter Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_LOOP_FILTER]}
{*ast.ValueSpec [FlagInterlacedME Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_INTERLACED_ME]}
{*ast.ValueSpec [FlagClosedGOP Flags]}
{*ast.SelectorExpr [C CODEC_FLAG_CLOSED_GOP]}


{*ast.GenDecl -> *ast.TypeSpec [Flags2 int]}


{*ast.GenDecl -> *ast.ValueSpec [Flag2Fast Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_FAST]}
{*ast.ValueSpec [Flag2NoOutput Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_NO_OUTPUT]}
{*ast.ValueSpec [Flag2LocalHeader Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_LOCAL_HEADER]}
{*ast.ValueSpec [Flag2DropFrameTimecode Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_DROP_FRAME_TIMECODE]}
{*ast.ValueSpec [Flag2IgnoreCrop Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_IGNORE_CROP]}
{*ast.ValueSpec [Flag2Chunks Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_CHUNKS]}
{*ast.ValueSpec [Flag2ShowAll Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_SHOW_ALL]}
{*ast.ValueSpec [Flag2ExportMvs Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_EXPORT_MVS]}
{*ast.ValueSpec [Flag2SkipManual Flags2]}
{*ast.SelectorExpr [C CODEC_FLAG2_SKIP_MANUAL]}


{*ast.GenDecl -> *ast.TypeSpec [Capabilities int]}


{*ast.GenDecl -> *ast.ValueSpec [CapabilityDrawHorizBand Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_DRAW_HORIZ_BAND]}
{*ast.ValueSpec [CapabilityDR1 Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_DR1]}
{*ast.ValueSpec [CapabilityTruncated Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_TRUNCATED]}
{*ast.ValueSpec [CapabilityHWAccel Capabilities]}
{*ast.SelectorExpr [C GO_CODEC_CAP_HWACCEL]}
{*ast.ValueSpec [CapabilityDelay Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_DELAY]}
{*ast.ValueSpec [CapabilitySmallLastFrame Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_SMALL_LAST_FRAME]}
{*ast.ValueSpec [CapabilityHWAccelVDPAU Capabilities]}
{*ast.SelectorExpr [C GO_CODEC_CAP_HWACCEL_VDPAU]}
{*ast.ValueSpec [CapabilitySubframes Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_SUBFRAMES]}
{*ast.ValueSpec [CapabilityExperimental Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_EXPERIMENTAL]}
{*ast.ValueSpec [CapabilityChannelConf Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_CHANNEL_CONF]}
{*ast.ValueSpec [CapabilityFrameThreads Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_FRAME_THREADS]}
{*ast.ValueSpec [CapabilitySliceThreads Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_SLICE_THREADS]}
{*ast.ValueSpec [CapabilityParamChange Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_PARAM_CHANGE]}
{*ast.ValueSpec [CapabilityAutoThreads Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_AUTO_THREADS]}
{*ast.ValueSpec [CapabilityVariableFrameSize Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_VARIABLE_FRAME_SIZE]}
{*ast.ValueSpec [CapabilityIntraOnly Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_INTRA_ONLY]}
{*ast.ValueSpec [CapabilityLossless Capabilities]}
{*ast.SelectorExpr [C CODEC_CAP_LOSSLESS]}


{*ast.GenDecl -> *ast.TypeSpec [Compliance int]}


{*ast.GenDecl -> *ast.ValueSpec [ComplianceVeryStrict Compliance]}
{*ast.SelectorExpr [C FF_COMPLIANCE_VERY_STRICT]}
{*ast.ValueSpec [ComplianceStrict Compliance]}
{*ast.SelectorExpr [C FF_COMPLIANCE_STRICT]}
{*ast.ValueSpec [ComplianceNormal Compliance]}
{*ast.SelectorExpr [C FF_COMPLIANCE_NORMAL]}
{*ast.ValueSpec [ComplianceUnofficial Compliance]}
{*ast.SelectorExpr [C FF_COMPLIANCE_UNOFFICIAL]}
{*ast.ValueSpec [ComplianceExperimental Compliance]}
{*ast.SelectorExpr [C FF_COMPLIANCE_EXPERIMENTAL]}


{*ast.GenDecl -> *ast.TypeSpec [PacketSideDataType]}
{*ast.SelectorExpr [C enum_AVPacketSideDataType]}


{*ast.GenDecl -> *ast.ValueSpec [PacketSideDataPalette PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_PALETTE]}
{*ast.ValueSpec [PacketSideDataNewExtraData PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_NEW_EXTRADATA]}
{*ast.ValueSpec [PacketSideDataParamChange PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_PARAM_CHANGE]}
{*ast.ValueSpec [PacketSideDataH263MBInfo PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_H263_MB_INFO]}
{*ast.ValueSpec [PacketSideDataReplayGain PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_REPLAYGAIN]}
{*ast.ValueSpec [PacketSideDataDisplayMatrix PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_DISPLAYMATRIX]}
{*ast.ValueSpec [PacketSideDataStereo3D PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_STEREO3D]}
{*ast.ValueSpec [PacketSideDataAudioServiceType PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_AUDIO_SERVICE_TYPE]}
{*ast.ValueSpec [PacketSideDataSkipSamples PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_SKIP_SAMPLES]}
{*ast.ValueSpec [PacketSideDataJPDualMono PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_JP_DUALMONO]}
{*ast.ValueSpec [PacketSideDataStringsMetaData PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_STRINGS_METADATA]}
{*ast.ValueSpec [PacketSideDataSubtitlePosition PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_SUBTITLE_POSITION]}
{*ast.ValueSpec [PacketSideDataMatroskaBlockAdditional PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL]}
{*ast.ValueSpec [PacketSideDataWebVTTIdentifier PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_WEBVTT_IDENTIFIER]}
{*ast.ValueSpec [PacketSideDataWebVTTSettings PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_WEBVTT_SETTINGS]}
{*ast.ValueSpec [PacketSideDataMetaDataUpdate PacketSideDataType]}
{*ast.SelectorExpr [C AV_PKT_DATA_METADATA_UPDATE]}


{*ast.GenDecl -> *ast.TypeSpec [PacketFlags int]}


{*ast.GenDecl -> *ast.ValueSpec [PacketFlagKey PacketFlags]}
{*ast.SelectorExpr [C AV_PKT_FLAG_KEY]}
{*ast.ValueSpec [PacketFlagCorrupt PacketFlags]}
{*ast.SelectorExpr [C AV_PKT_FLAG_CORRUPT]}


{*ast.GenDecl -> *ast.TypeSpec [DCTAlgorithm int]}


{*ast.GenDecl -> *ast.ValueSpec [DCTAlgorithmAuto DCTAlgorithm]}
{*ast.SelectorExpr [C FF_DCT_AUTO]}
{*ast.ValueSpec [DCTAlgorithmFastInt DCTAlgorithm]}
{*ast.SelectorExpr [C FF_DCT_FASTINT]}
{*ast.ValueSpec [DCTAlgorithmInt DCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_DCT_INT]}
{*ast.ValueSpec [DCTAlgorithmMMX DCTAlgorithm]}
{*ast.SelectorExpr [C FF_DCT_MMX]}
{*ast.ValueSpec [DCTAlgorithmAltiVec DCTAlgorithm]}
{*ast.SelectorExpr [C FF_DCT_ALTIVEC]}
{*ast.ValueSpec [DCTAlgorithmFAAN DCTAlgorithm]}
{*ast.SelectorExpr [C FF_DCT_FAAN]}


{*ast.GenDecl -> *ast.TypeSpec [IDCTAlgorithm int]}


{*ast.GenDecl -> *ast.ValueSpec [IDCTAlgorithmAuto IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_AUTO]}
{*ast.ValueSpec [IDCTAlgorithmInt IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_INT]}
{*ast.ValueSpec [IDCTAlgorithmSimple IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLE]}
{*ast.ValueSpec [IDCTAlgorithmSimpleMMX IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLEMMX]}
{*ast.ValueSpec [IDCTAlgorithmARM IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_ARM]}
{*ast.ValueSpec [IDCTAlgorithmAltiVec IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_ALTIVEC]}
{*ast.ValueSpec [IDCTAlgorithmSH4 IDCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_IDCT_SH4]}
{*ast.ValueSpec [IDCTAlgorithmSimpleARM IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLEARM]}
{*ast.ValueSpec [IDCTAlgorithmIPP IDCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_IDCT_IPP]}
{*ast.ValueSpec [IDCTAlgorithmXvid IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_XVID]}
{*ast.ValueSpec [IDCTAlgorithmXvidMMX IDCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_IDCT_XVIDMMX]}
{*ast.ValueSpec [IDCTAlgorithmSimpleARMv5TE IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLEARMV5TE]}
{*ast.ValueSpec [IDCTAlgorithmSimpleARMv6 IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLEARMV6]}
{*ast.ValueSpec [IDCTAlgorithmSimpleVis IDCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_IDCT_SIMPLEVIS]}
{*ast.ValueSpec [IDCTAlgorithmFAAN IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_FAAN]}
{*ast.ValueSpec [IDCTAlgorithmSimpleNEON IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLENEON]}
{*ast.ValueSpec [IDCTAlgorithmSimpleAlpha IDCTAlgorithm]}
{*ast.SelectorExpr [C GO_FF_IDCT_SIMPLEALPHA]}
{*ast.ValueSpec [IDCTAlgorithmSimpleAuto IDCTAlgorithm]}
{*ast.SelectorExpr [C FF_IDCT_SIMPLEAUTO]}


{*ast.GenDecl -> *ast.TypeSpec [ThreadType int]}


{*ast.GenDecl -> *ast.ValueSpec [ThreadTypeFrame ThreadType]}
{*ast.SelectorExpr [C FF_THREAD_FRAME]}
{*ast.ValueSpec [ThreadTypeSlice ThreadType]}
{*ast.SelectorExpr [C FF_THREAD_SLICE]}


{*ast.GenDecl -> *ast.ValueSpec [ProfileUnknown int]}
{*ast.SelectorExpr [C FF_PROFILE_UNKNOWN]}


{*ast.GenDecl -> *ast.TypeSpec [SubtitlesEncodingMode int]}


{*ast.GenDecl -> *ast.ValueSpec [SubtitlesEncodingModeDoNothing SubtitlesEncodingMode]}
{*ast.SelectorExpr [C FF_SUB_CHARENC_MODE_DO_NOTHING]}
{*ast.ValueSpec [SubtitlesEncodingModeAutomatic SubtitlesEncodingMode]}
{*ast.SelectorExpr [C FF_SUB_CHARENC_MODE_AUTOMATIC]}
{*ast.ValueSpec [SubtitlesEncodingModePreDecoder SubtitlesEncodingMode]}
{*ast.SelectorExpr [C FF_SUB_CHARENC_MODE_PRE_DECODER]}


{*ast.GenDecl -> *ast.TypeSpec [CodecProps int]}


{*ast.GenDecl -> *ast.ValueSpec [CodecPropIntraOnly CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_INTRA_ONLY]}
{*ast.ValueSpec [CodecPropLossy CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_LOSSY]}
{*ast.ValueSpec [CodecPropLossless CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_LOSSLESS]}
{*ast.ValueSpec [CodecPropReorder CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_REORDER]}
{*ast.ValueSpec [CodecPropBitmapSub CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_BITMAP_SUB]}
{*ast.ValueSpec [CodecPropTextSub CodecProps]}
{*ast.SelectorExpr [C AV_CODEC_PROP_TEXT_SUB]}


function name is init 
	 { [init]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr [RegisterAll]}


function name is Version 
	 { [Version]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.Field [int]}
	 {*ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr [C GO_AVCODEC_VERSION_MAJOR]}
	 {*ast.CallExpr [int]}
	 {*ast.SelectorExpr [C GO_AVCODEC_VERSION_MINOR]}
	 {*ast.CallExpr [int]}
	 {*ast.SelectorExpr [C GO_AVCODEC_VERSION_MICRO]}


function name is RegisterAll 
	 { [RegisterAll]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C avcodec_register_all]}


{*ast.GenDecl -> *ast.TypeSpec [PacketSideData]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVPacketSideData]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVPacketSideData]}


function name is NewPacketSideDataFromC 
	 { [NewPacketSideDataFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cPSD unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [PacketSideData]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [PacketSideData]}
	 {*ast.KeyValueExpr [CAVPacketSideData]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVPacketSideData cPSD]}


function name is Data 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData Data]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData data]}


function name is SetData 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData SetData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [data unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData data]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C uint8_t data]}


function name is Size 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData Size]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData size]}


function name is SetSize 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData SetSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is Type 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData Type]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [PacketSideDataType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [PacketSideDataType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData _type]}


function name is SetType 
	 {*ast.FieldList -> *ast.Field [psd]}
	 {*ast.StarExpr [PacketSideData SetType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [t PacketSideDataType]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [psd CAVPacketSideData _type]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVPacketSideDataType t]}


{*ast.GenDecl -> *ast.TypeSpec [Packet]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVPacket]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVPacket]}


function name is NewPacket 
	 { [NewPacket]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr [Packet]}
	 {*ast.Field [error]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cPkt]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVPacket]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C av_packet_alloc]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cPkt nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil ErrAllocationError]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewPacketFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cPkt nil]}


function name is NewPacketFromC 
	 { [NewPacketFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cPkt unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Packet]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [Packet]}
	 {*ast.KeyValueExpr [CAVPacket]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVPacket cPkt]}


function name is Free 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Free]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C av_packet_free]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr [pkt CAVPacket]}


function name is Ref 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Ref]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [dst]}
	 {*ast.StarExpr [Packet]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= code]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C av_packet_ref]}
	 {*ast.SelectorExpr [dst CAVPacket]}
	 {*ast.SelectorExpr [pkt CAVPacket]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [< code]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewErrorFromCode]}
	 {*ast.CallExpr -> *ast.SelectorExpr [avutil ErrorCode code]}
	 {*ast.ReturnStmt [nil]}


function name is Unref 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Unref]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C av_packet_unref]}
	 {*ast.SelectorExpr [pkt CAVPacket]}


function name is ConsumeData 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet ConsumeData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= data]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket data]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= data nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [-=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket size]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int size]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket data]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C uint8_t]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BinaryExpr [+]}
	 {*ast.CallExpr [uintptr data]}
	 {*ast.CallExpr [uintptr size]}


function name is RescaleTime 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet RescaleTime]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [srcTimeBase dstTimeBase]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= src]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVRational]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr [srcTimeBase CAVRational]}
	 {*ast.AssignStmt [:= dst]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVRational]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr [dstTimeBase CAVRational]}
	 {*ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C av_packet_rescale_ts]}
	 {*ast.SelectorExpr [pkt CAVPacket]}
	 {*ast.StarExpr [src]}
	 {*ast.StarExpr [dst]}


function name is PTS 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet PTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket pts]}


function name is SetPTS 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetPTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [pts int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket pts]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t pts]}


function name is DTS 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet DTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket dts]}


function name is SetDTS 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetDTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [dts int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket dts]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t dts]}


function name is Duration 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Duration]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket duration]}


function name is SetDuration 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetDuration]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [duration int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket duration]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t duration]}


function name is Data 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Data]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket data]}


function name is SetData 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [data unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket data]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C uint8_t data]}


function name is Size 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Size]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket size]}


function name is SetSize 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is SideData 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SideData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.StarExpr [PacketSideData]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= count]}
	 {*ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket side_data_elems]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [<= count]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.AssignStmt [:= psds]}
	 {*ast.CallExpr [make]}
	 {*ast.ArrayType -> *ast.StarExpr [PacketSideData]}
	 {*ast.BasicLit [INT 0]}
	 { [count]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BinaryExpr [< i count]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cPSD]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_packetsidedata_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket side_data]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.AssignStmt [:= psd]}
	 {*ast.CallExpr [NewPacketSideDataFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cPSD]}
	 {*ast.AssignStmt [= psds]}
	 {*ast.CallExpr [append psds psd]}
	 {*ast.ReturnStmt [psds]}


function name is StreamIndex 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet StreamIndex]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket stream_index]}


function name is SetStreamIndex 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetStreamIndex]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [streamIndex int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket stream_index]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int streamIndex]}


function name is Flags 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Flags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [PacketFlags]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [PacketFlags]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket flags]}


function name is SetFlags 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetFlags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [flags PacketFlags]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket flags]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int flags]}


function name is Position 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet Position]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket pos]}


function name is SetPosition 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetPosition]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [position int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket pos]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t position]}


function name is ConvergenceDuration 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet ConvergenceDuration]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket convergence_duration]}


function name is SetConvergenceDuration 
	 {*ast.FieldList -> *ast.Field [pkt]}
	 {*ast.StarExpr [Packet SetConvergenceDuration]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [convergenceDuration int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [pkt CAVPacket convergence_duration]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t convergenceDuration]}


{*ast.GenDecl -> *ast.TypeSpec [Profile]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVProfile]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVProfile]}


function name is NewProfileFromC 
	 { [NewProfileFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cProfile unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Profile]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [Profile]}
	 {*ast.KeyValueExpr [CAVProfile]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVProfile cProfile]}


function name is Name 
	 {*ast.FieldList -> *ast.Field [p]}
	 {*ast.StarExpr [Profile Name]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= name _]}
	 {*ast.CallExpr -> *ast.SelectorExpr [p NameOK]}
	 {*ast.ReturnStmt [name]}


function name is NameOK 
	 {*ast.FieldList -> *ast.Field [p]}
	 {*ast.StarExpr [Profile NameOK]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [p CAVProfile name]}


function name is ID 
	 {*ast.FieldList -> *ast.Field [p]}
	 {*ast.StarExpr [Profile ID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [p CAVProfile profile]}


{*ast.GenDecl -> *ast.TypeSpec [Codec]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVCodec]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVCodec]}


function name is NewCodecFromC 
	 { [NewCodecFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cCodec unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [Codec]}
	 {*ast.KeyValueExpr [CAVCodec]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVCodec cCodec]}


function name is FindEncoderByID 
	 { [FindEncoderByID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codecID CodecID]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cCodec]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_find_encoder]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVCodecID codecID]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodec nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodec]}


function name is FindEncoderByName 
	 { [FindEncoderByName]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [name string]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cName]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C CString name]}
	 {*ast.DeferStmt -> *ast.CallExpr -> *ast.SelectorExpr [C free]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cName]}
	 {*ast.AssignStmt [:= cCodec]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_find_encoder_by_name cName]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodec nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodec]}


function name is FindDecoderByID 
	 { [FindDecoderByID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codecID CodecID]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cCodec]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_find_decoder]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVCodecID codecID]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodec nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodec]}


function name is FindDecoderByName 
	 { [FindDecoderByName]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [name string]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cName]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C CString name]}
	 {*ast.DeferStmt -> *ast.CallExpr -> *ast.SelectorExpr [C free]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cName]}
	 {*ast.AssignStmt [:= cCodec]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_find_decoder_by_name cName]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodec nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodec]}


function name is PrivateClass 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec PrivateClass]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil Class]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec priv_class nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewClassFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec priv_class]}


function name is Name 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec Name]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= str _]}
	 {*ast.CallExpr -> *ast.SelectorExpr [c NameOk]}
	 {*ast.ReturnStmt [str]}


function name is NameOk 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec NameOk]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec name]}


function name is Type 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec Type]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec _type]}


function name is ID 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec ID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [CodecID]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [CodecID]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec id]}


function name is Capabilities 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec Capabilities]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [Capabilities]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [Capabilities]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec capabilities]}


function name is SupportedFrameRates 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec SupportedFrameRates]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [frameRates]}
	 {*ast.ArrayType -> *ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cFrameRate]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_rational_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec supported_framerates]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [||]}
	 {*ast.BinaryExpr [== cFrameRate nil]}
	 {*ast.ParenExpr []}
	 {*ast.BinaryExpr [&&]}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr [cFrameRate num]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr [cFrameRate den]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= frameRate]}
	 {*ast.CallExpr -> *ast.SelectorExpr [avutil NewRationalFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cFrameRate]}
	 {*ast.AssignStmt [= frameRates]}
	 {*ast.CallExpr [append frameRates frameRate]}
	 {*ast.ReturnStmt [frameRates]}


function name is SupportedPixelFormats 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec SupportedPixelFormats]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [pixelFormats]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cPixelFormat]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_pixfmt_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec pix_fmts]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cPixelFormat nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= pixelFormat]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.StarExpr [cPixelFormat]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== pixelFormat]}
	 {*ast.UnaryExpr [-]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= pixelFormats]}
	 {*ast.CallExpr [append pixelFormats pixelFormat]}
	 {*ast.ReturnStmt [pixelFormats]}


function name is SupportedSampleRates 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec SupportedSampleRates]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType [int]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [sampleRates]}
	 {*ast.ArrayType [int]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cSampleRate]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_int_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec supported_samplerates]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cSampleRate nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= sampleRate]}
	 {*ast.CallExpr -> *ast.ParenExpr [int]}
	 {*ast.StarExpr [cSampleRate]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== sampleRate]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= sampleRates]}
	 {*ast.CallExpr [append sampleRates sampleRate]}
	 {*ast.ReturnStmt [sampleRates]}


function name is SupportedSampleFormats 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec SupportedSampleFormats]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [sampleFormats]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cSampleFormat]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_samplefmt_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec sample_fmts]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cSampleFormat nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= sampleFormat]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.StarExpr [cSampleFormat]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== sampleFormat]}
	 {*ast.UnaryExpr [-]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= sampleFormats]}
	 {*ast.CallExpr [append sampleFormats sampleFormat]}
	 {*ast.ReturnStmt [sampleFormats]}


function name is SupportedChannelLayouts 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec SupportedChannelLayouts]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [channelLayouts]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cChannelLayout]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_uint64_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec channel_layouts]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cChannelLayout nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= channelLayout]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.StarExpr [cChannelLayout]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== channelLayout]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= channelLayouts]}
	 {*ast.CallExpr [append channelLayouts channelLayout]}
	 {*ast.ReturnStmt [channelLayouts]}


function name is Profiles 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec Profiles]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.StarExpr [Profile]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [profiles]}
	 {*ast.ArrayType -> *ast.StarExpr [Profile]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cProfile]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_profile_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodec profiles]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [||]}
	 {*ast.BinaryExpr [== cProfile nil]}
	 {*ast.BinaryExpr [==]}
	 {*ast.CallExpr [int]}
	 {*ast.SelectorExpr [cProfile profile ProfileUnknown]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= profile]}
	 {*ast.CallExpr [NewProfileFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cProfile]}
	 {*ast.AssignStmt [= profiles]}
	 {*ast.CallExpr [append profiles profile]}
	 {*ast.ReturnStmt [profiles]}


function name is ProfileName 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec ProfileName]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [id int]}
	 {*ast.FieldList -> *ast.Field [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= name _]}
	 {*ast.CallExpr -> *ast.SelectorExpr [c ProfileNameOK id]}
	 {*ast.ReturnStmt [name]}


function name is ProfileNameOK 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [Codec ProfileNameOK]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [id int]}
	 {*ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C av_get_profile_name]}
	 {*ast.SelectorExpr [c CAVCodec]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int id]}


{*ast.GenDecl -> *ast.TypeSpec [Context]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVCodecContext]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVCodecContext]}
{*ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil OptionAccessor]}


function name is NewContextWithCodec 
	 { [NewContextWithCodec]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codec]}
	 {*ast.StarExpr [Codec]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Context]}
	 {*ast.Field [error]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cCodec]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C AVCodec]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= codec nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cCodec]}
	 {*ast.SelectorExpr [codec CAVCodec]}
	 {*ast.AssignStmt [:= cCtx]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_alloc_context3 cCodec]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCtx nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil ErrAllocationError]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewContextFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCtx nil]}


function name is NewContextFromC 
	 { [NewContextFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cCtx unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [Context]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [Context]}
	 {*ast.KeyValueExpr [CAVCodecContext]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVCodecContext cCtx]}
	 {*ast.KeyValueExpr [OptionAccessor]}
	 {*ast.CallExpr -> *ast.SelectorExpr [avutil NewOptionAccessor cCtx false]}


function name is Free 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Free]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [!=]}
	 {*ast.SelectorExpr [ctx CAVCodecContext nil]}
	 {*ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C avcodec_free_context]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr [ctx CAVCodecContext]}


function name is Open 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Open]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [options]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Dictionary]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [ctx OpenWithCodec nil options]}


function name is OpenWithCodec 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context OpenWithCodec]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codec]}
	 {*ast.StarExpr [Codec]}
	 {*ast.Field [options]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Dictionary]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cCodec]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C AVCodec]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= codec nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cCodec]}
	 {*ast.SelectorExpr [codec CAVCodec]}
	 {*ast.GenDecl -> *ast.ValueSpec [cOptions]}
	 {*ast.StarExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVDictionary]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= options nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cOptions]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVDictionary]}
	 {*ast.CallExpr -> *ast.SelectorExpr [options Pointer]}
	 {*ast.AssignStmt [:= code]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_open2]}
	 {*ast.SelectorExpr [ctx CAVCodecContext cCodec cOptions]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [< code]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewErrorFromCode]}
	 {*ast.CallExpr -> *ast.SelectorExpr [avutil ErrorCode code]}
	 {*ast.ReturnStmt [nil]}


function name is OpenForEncoding 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context OpenForEncoding]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [options]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Dictionary]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= encoder]}
	 {*ast.CallExpr [FindEncoderByID]}
	 {*ast.CallExpr -> *ast.SelectorExpr [ctx CodecID]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== encoder nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [ErrEncoderNotFound]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [ctx OpenWithCodec encoder options]}


function name is OpenForDecoding 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context OpenForDecoding]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [options]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Dictionary]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= decoder]}
	 {*ast.CallExpr [FindDecoderByID]}
	 {*ast.CallExpr -> *ast.SelectorExpr [ctx CodecID]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== decoder nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [ErrDecoderNotFound]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [ctx OpenWithCodec decoder options]}


function name is Close 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Close]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C avcodec_close]}
	 {*ast.SelectorExpr [ctx CAVCodecContext]}


function name is Class 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Class]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil Class]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext av_class nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewClassFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext av_class]}


function name is CodecType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodecType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_type]}


function name is SetCodecType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodecType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codecType]}
	 {*ast.SelectorExpr [avutil MediaType]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_type]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVMediaType codecType]}


function name is Codec 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Codec]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec]}


function name is SetCodec 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodec]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codec]}
	 {*ast.StarExpr [Codec]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cCodec]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C AVCodec]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= codec nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cCodec]}
	 {*ast.SelectorExpr [codec CAVCodec]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec cCodec]}


function name is CodecID 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodecID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [CodecID]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr [CodecID]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_id]}


function name is SetCodecID 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodecID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [id CodecID]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_id]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVCodecID id]}


function name is CodecTag 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodecTag]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [uint]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [uint]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_tag]}


function name is SetCodecTag 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodecTag]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codecTag uint]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_tag]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C uint codecTag]}


function name is PrivData 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PrivData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext priv_data]}


function name is SetPrivData 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPrivData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [privData unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext priv_data]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [unsafe Pointer privData]}


function name is Opaque 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Opaque]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext opaque]}


function name is SetOpaque 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetOpaque]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [opaque unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext opaque opaque]}


function name is BitRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BitRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bit_rate]}


function name is SetBitRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBitRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bitRate int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bit_rate]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t bitRate]}


function name is BitRateTolerance 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BitRateTolerance]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bit_rate_tolerance]}


function name is SetBitRateTolerance 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBitRateTolerance]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bitRateTolerance int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bit_rate_tolerance]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bitRateTolerance]}


function name is GlobalQuality 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context GlobalQuality]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext global_quality]}


function name is SetGlobalQuality 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetGlobalQuality]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [globalQuality int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext global_quality]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int globalQuality]}


function name is CompressionLevel 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CompressionLevel]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext compression_level]}


function name is SetCompressionLevel 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCompressionLevel]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [compressionLevel int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext compression_level]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int compressionLevel]}


function name is Flags 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Flags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [Flags]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [Flags]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext flags]}


function name is SetFlags 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFlags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [flags Flags]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext flags]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int flags]}


function name is Flags2 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Flags2]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [Flags2]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [Flags2]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext flags2]}


function name is SetFlags2 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFlags2]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [flags2 Flags2]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext flags2]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int flags2]}


function name is ExtraData 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ExtraData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext extradata]}


function name is SetExtraData 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetExtraData]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [data unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext extradata]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C uint8_t data]}


function name is ExtraDataSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ExtraDataSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext extradata_size]}


function name is SetExtraDataSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetExtraDataSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [extraDataSize int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext extradata_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int extraDataSize]}


function name is TimeBase 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context TimeBase]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewRationalFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext time_base]}


function name is SetTimeBase 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetTimeBase]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [timeBase]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext time_base num]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [timeBase Numerator]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext time_base den]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [timeBase Denominator]}


function name is TicksPerFrame 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context TicksPerFrame]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext ticks_per_frame]}


function name is Delay 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Delay]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext delay]}


function name is Width 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Width]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext width]}


function name is SetWidth 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetWidth]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [width int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext width]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int width]}


function name is Height 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Height]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext height]}


function name is SetHeight 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetHeight]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [height int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext height]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int height]}


function name is CodedWidth 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodedWidth]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext coded_width]}


function name is SetCodedWidth 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodedWidth]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codedWidth int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext coded_width]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int codedWidth]}


function name is CodedHeight 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodedHeight]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext coded_height]}


function name is SetCodedHeight 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCodedHeight]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codedHeight int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext coded_height]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int codedHeight]}


function name is GOPSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context GOPSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext gop_size]}


function name is SetGOPSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetGOPSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [gOPSize int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext gop_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int gOPSize]}


function name is PixelFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PixelFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pix_fmt]}


function name is SetPixelFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPixelFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [pixelFormat]}
	 {*ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pix_fmt]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVPixelFormat pixelFormat]}


function name is MaxBFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MaxBFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_b_frames]}


function name is SetMaxBFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMaxBFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [maxBFrames int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_b_frames]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int maxBFrames]}


function name is BQuantFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BQuantFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_quant_factor]}


function name is SetBQuantFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBQuantFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bQuantFactor float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_quant_factor]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float bQuantFactor]}


function name is BFrameStrategy 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BFrameStrategy]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_frame_strategy]}


function name is SetBFrameStrategy 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBFrameStrategy]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bFrameStrategy int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_frame_strategy]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bFrameStrategy]}


function name is BQuantOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BQuantOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_quant_offset]}


function name is SetBQuantOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBQuantOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bQuantOffset float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_quant_offset]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float bQuantOffset]}


function name is HasBFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context HasBFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext has_b_frames]}


function name is SetHasBFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetHasBFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [hasBFrames int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext has_b_frames]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int hasBFrames]}


function name is MPEGQuant 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MPEGQuant]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mpeg_quant]}


function name is SetMPEGQuant 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMPEGQuant]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [mPEGQuant int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mpeg_quant]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int mPEGQuant]}


function name is IQuantFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context IQuantFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_quant_factor]}


function name is SetIQuantFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetIQuantFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [iQuantFactor float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_quant_factor]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float iQuantFactor]}


function name is IQuantOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context IQuantOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_quant_offset]}


function name is SetIQuantOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetIQuantOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [iQuantOffset float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_quant_offset]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float iQuantOffset]}


function name is LumiMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context LumiMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext lumi_masking]}


function name is SetLumiMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetLumiMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [lumiMasking float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext lumi_masking]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float lumiMasking]}


function name is TemporalCplxMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context TemporalCplxMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext temporal_cplx_masking]}


function name is SetTemporalCplxMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetTemporalCplxMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [temporalCplxMasking float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext temporal_cplx_masking]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float temporalCplxMasking]}


function name is SpatialCplxMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SpatialCplxMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext spatial_cplx_masking]}


function name is SetSpatialCplxMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSpatialCplxMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [spatialCplxMasking float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext spatial_cplx_masking]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float spatialCplxMasking]}


function name is PMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_masking]}


function name is SetPMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [pMasking float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_masking]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float pMasking]}


function name is DarkMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context DarkMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dark_masking]}


function name is SetDarkMasking 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetDarkMasking]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [darkMasking float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dark_masking]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float darkMasking]}


function name is SliceCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SliceCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slice_count]}


function name is SetSliceCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSliceCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [sliceCount int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slice_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int sliceCount]}


function name is PredictionMethod 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PredictionMethod]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext prediction_method]}


function name is SetPredictionMethod 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPredictionMethod]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [predictionMethod int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext prediction_method]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int predictionMethod]}


function name is SliceOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SliceOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slice_offset]}


function name is SetSliceOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSliceOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [sliceOffset unsafe Pointer]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slice_offset]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C int sliceOffset]}


function name is SampleAspectRatio 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SampleAspectRatio]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewRationalFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_aspect_ratio]}


function name is SetSampleAspectRatio 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSampleAspectRatio]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [aspectRatio]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_aspect_ratio num]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [aspectRatio Numerator]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_aspect_ratio den]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [aspectRatio Denominator]}


function name is MECmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MECmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_cmp]}


function name is SetMECmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMECmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [meCmp int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int meCmp]}


function name is MESubCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MESubCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_sub_cmp]}


function name is SetMESubCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMESubCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [meSubCmp int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_sub_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int meSubCmp]}


function name is MBCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MBCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_cmp]}


function name is SetMBCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMBCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [mbCmp int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int mbCmp]}


function name is ILDCTCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ILDCTCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext ildct_cmp]}


function name is SetILDCTCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetILDCTCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [ildctCmp int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext ildct_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int ildctCmp]}


function name is DiaSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context DiaSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dia_size]}


function name is SetDiaSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetDiaSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [diaSize int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dia_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int diaSize]}


function name is LastPredictorCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context LastPredictorCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext last_predictor_count]}


function name is SetLastPredictorCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetLastPredictorCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext last_predictor_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is PreME 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PreME]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pre_me]}


function name is SetPreME 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPreME]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [preME int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pre_me]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int preME]}


function name is MEPreCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MEPreCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_pre_cmp]}


function name is SetMEPreCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMEPreCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [mePreCmp int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_pre_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int mePreCmp]}


function name is PreDiaSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PreDiaSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pre_dia_size]}


function name is SetPreDiaSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPreDiaSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [preDiaSize int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pre_dia_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int preDiaSize]}


function name is MESubpelQuality 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MESubpelQuality]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_subpel_quality]}


function name is SetMESubpelQuality 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMESubpelQuality]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [meSubpelQuality int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_subpel_quality]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int meSubpelQuality]}


function name is MERange 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MERange]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_range]}


function name is SetMERange 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMERange]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [meRange int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_range]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int meRange]}


function name is MBDecision 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MBDecision]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_decision]}


function name is SetMBDecision 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMBDecision]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [mbDecision int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_decision]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int mbDecision]}


function name is ScenechangeThreshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ScenechangeThreshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext scenechange_threshold]}


function name is SetScenechangeThreshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetScenechangeThreshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [threshold int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext scenechange_threshold]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int threshold]}


function name is NoiseReduction 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context NoiseReduction]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext noise_reduction]}


function name is SetNoiseReduction 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetNoiseReduction]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [reduction int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext noise_reduction]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int reduction]}


function name is IntraDCPrecision 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context IntraDCPrecision]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext intra_dc_precision]}


function name is SetIntraDCPrecision 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetIntraDCPrecision]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [precision int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext intra_dc_precision]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int precision]}


function name is SkipTop 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SkipTop]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_top]}


function name is SetSkipTop 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSkipTop]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_top]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int skip]}


function name is SkipBottom 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SkipBottom]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_bottom]}


function name is SetSkipBottom 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSkipBottom]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_bottom]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int skip]}


function name is MBLmin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MBLmin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_lmin]}


function name is SetMBLmin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMBLmin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [min int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_lmin]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int min]}


function name is MBLmax 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MBLmax]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_lmax]}


function name is SetMBLmax 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMBLmax]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [max int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mb_lmax]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int max]}


function name is MEPenaltyCompensation 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MEPenaltyCompensation]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_penalty_compensation]}


function name is SetMEPenaltyCompensation 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMEPenaltyCompensation]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [compensation int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext me_penalty_compensation]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int compensation]}


function name is BidirRefine 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BidirRefine]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bidir_refine]}


function name is SetBidirRefine 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBidirRefine]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [refine int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bidir_refine]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int refine]}


function name is BrdScale 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BrdScale]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext brd_scale]}


function name is SetBrdScale 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBrdScale]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [brdScale int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext brd_scale]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int brdScale]}


function name is KeyIntMin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context KeyIntMin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext keyint_min]}


function name is SetKeyIntMin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetKeyIntMin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [min int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext keyint_min]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int min]}


function name is Refs 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Refs]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext refs]}


function name is SetRefs 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRefs]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [refs int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext refs]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int refs]}


function name is ChromaOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ChromaOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext chromaoffset]}


function name is SetChromaOffset 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetChromaOffset]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [offset int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext chromaoffset]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int offset]}


function name is MV0Threshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MV0Threshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mv0_threshold]}


function name is SetMV0Threshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMV0Threshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [threshold int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mv0_threshold]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int threshold]}


function name is BSensitivity 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BSensitivity]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_sensitivity]}


function name is SetBSensitivity 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBSensitivity]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [sensivity int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext b_sensitivity]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int sensivity]}


function name is ChromaSampleLocation 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ChromaSampleLocation]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil ChromaLocation]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil ChromaLocation]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext chroma_sample_location]}


function name is SetChromaSampleLocation 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetChromaSampleLocation]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [location]}
	 {*ast.SelectorExpr [avutil ChromaLocation]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext chroma_sample_location]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVChromaLocation location]}


function name is Slices 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Slices]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slices]}


function name is SetSlices 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSlices]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [slices int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext slices]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int slices]}


function name is SampleRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SampleRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_rate]}


function name is SetSampleRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSampleRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [rate int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_rate]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int rate]}


function name is Channels 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Channels]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext channels]}


function name is SetChannels 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetChannels]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [channels int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext channels]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int channels]}


function name is SampleFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SampleFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_fmt]}


function name is SetSampleFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSampleFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [format]}
	 {*ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sample_fmt]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVSampleFormat format]}


function name is FrameSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_size]}


function name is SetFrameSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is FrameNumber 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameNumber]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_number]}


function name is SetFrameNumber 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameNumber]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [number int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_number]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int number]}


function name is BlockAlign 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BlockAlign]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext block_align]}


function name is SetBlockAlign 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBlockAlign]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [blockAlign int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext block_align]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int blockAlign]}


function name is Cutoff 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Cutoff]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext cutoff]}


function name is SetCutoff 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetCutoff]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [cutoff int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext cutoff]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int cutoff]}


function name is ChannelLayout 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ChannelLayout]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext channel_layout]}


function name is SetChannelLayout 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetChannelLayout]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [layout]}
	 {*ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext channel_layout]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C uint64_t layout]}


function name is RequestChannelLayout 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RequestChannelLayout]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext request_channel_layout]}


function name is SetRequestChannelLayout 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRequestChannelLayout]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [layout]}
	 {*ast.SelectorExpr [avutil ChannelLayout]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext request_channel_layout]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C uint64_t layout]}


function name is RequestSampleFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RequestSampleFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext request_sample_fmt]}


function name is SetRequestSampleFormat 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRequestSampleFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [format]}
	 {*ast.SelectorExpr [avutil SampleFormat]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext request_sample_fmt]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVSampleFormat format]}


function name is RefCountedFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RefCountedFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.BinaryExpr [!=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext refcounted_frames]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 0]}


function name is SetRefCountedFrames 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRefCountedFrames]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [refCounted bool]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cRefCounted]}
	 {*ast.SelectorExpr [C int]}
	 {*ast.IfStmt [refCounted]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cRefCounted]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext refcounted_frames cRefCounted]}


function name is QCompress 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context QCompress]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qcompress]}


function name is SetQCompress 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetQCompress]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [qcompress float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qcompress]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float qcompress]}


function name is QBlur 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context QBlur]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qblur]}


function name is SetQBlur 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetQBlur]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [qblur float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qblur]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float qblur]}


function name is QMin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context QMin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qmin]}


function name is SetQMin 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetQMin]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [qmin int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qmin]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int qmin]}


function name is QMax 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context QMax]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qmax]}


function name is SetQMax 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetQMax]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [qmax int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext qmax]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int qmax]}


function name is MaxQDiff 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MaxQDiff]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_qdiff]}


function name is SetMaxQDiff 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMaxQDiff]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [max int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_qdiff]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int max]}


function name is RCBufferSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCBufferSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_buffer_size]}


function name is SetRCBufferSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCBufferSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_buffer_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is RCOverrideCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCOverrideCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_override_count]}


function name is SetRCOverrideCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCOverrideCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_override_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is RCMaxRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCMaxRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_max_rate]}


function name is SetRCMaxRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCMaxRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [max int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_max_rate]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t max]}


function name is RCMinRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCMinRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_min_rate]}


function name is SetRCMinRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCMinRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [min int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_min_rate]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t min]}


function name is RCMaxAvailableVBVUse 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCMaxAvailableVBVUse]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_max_available_vbv_use]}


function name is SetRCMaxAvailableVBVUse 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCMaxAvailableVBVUse]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [max float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_max_available_vbv_use]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float max]}


function name is RCMinVBVOverflowUse 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCMinVBVOverflowUse]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [float32]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [float32]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_min_vbv_overflow_use]}


function name is SetRCMinVBVOverflowUse 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCMinVBVOverflowUse]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [min float32]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_min_vbv_overflow_use]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C float min]}


function name is RCInitialBufferOccupancy 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RCInitialBufferOccupancy]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_initial_buffer_occupancy]}


function name is SetRCInitialBufferOccupancy 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRCInitialBufferOccupancy]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [initial int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rc_initial_buffer_occupancy]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int initial]}


function name is ContextModel 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ContextModel]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext context_model]}


function name is SetContextModel 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetContextModel]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [contextModel int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext context_model]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int contextModel]}


function name is FrameSkipThreshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameSkipThreshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_threshold]}


function name is SetFrameSkipThreshold 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameSkipThreshold]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [threshold int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_threshold]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int threshold]}


function name is FrameSkipFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameSkipFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_factor]}


function name is SetFrameSkipFactor 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameSkipFactor]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [factor int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_factor]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int factor]}


function name is FrameSkipExp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameSkipExp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_exp]}


function name is SetFrameSkipExp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameSkipExp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_exp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int skip]}


function name is FrameSkipCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameSkipCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_cmp]}


function name is SetFrameSkipCmp 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameSkipCmp]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_skip_cmp]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int skip]}


function name is Trellis 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Trellis]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext trellis]}


function name is SetTrellis 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetTrellis]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [trellis int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext trellis]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int trellis]}


function name is MinPredictionOrder 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MinPredictionOrder]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext min_prediction_order]}


function name is SetMinPredictionOrder 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMinPredictionOrder]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [min int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext min_prediction_order]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int min]}


function name is MaxPredictionOrder 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MaxPredictionOrder]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_prediction_order]}


function name is SetMaxPredictionOrder 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMaxPredictionOrder]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [max int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext max_prediction_order]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int max]}


function name is TimecodeFrameStart 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context TimecodeFrameStart]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext timecode_frame_start]}


function name is SetTimecodeFrameStart 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetTimecodeFrameStart]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [start int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext timecode_frame_start]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t start]}


function name is RTPPayloadSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context RTPPayloadSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rtp_payload_size]}


function name is SetRTPPayloadSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetRTPPayloadSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext rtp_payload_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is MVBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MVBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mv_bits]}


function name is SetMVBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMVBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext mv_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is HeaderBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context HeaderBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext header_bits]}


function name is SetHeaderBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetHeaderBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext header_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is ITexBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ITexBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_tex_bits]}


function name is SetITexBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetITexBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_tex_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is PTexBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PTexBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_tex_bits]}


function name is SetPTexBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPTexBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_tex_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is ICount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ICount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_count]}


function name is SetICount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetICount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext i_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is PCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_count]}


function name is SetPCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetPCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext p_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is SkipCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SkipCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_count]}


function name is SetSkipCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSkipCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int skip]}


function name is MiscBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context MiscBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext misc_bits]}


function name is SetMiscBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetMiscBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext misc_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is FrameBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_bits]}


function name is SetFrameBits 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameBits]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext frame_bits]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is StrictStdCompliance 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context StrictStdCompliance]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [Compliance]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [Compliance]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext strict_std_compliance]}


function name is SetStrictStdCompliance 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetStrictStdCompliance]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [compliance Compliance]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext strict_std_compliance]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int compliance]}


function name is ReorderedOpaque 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ReorderedOpaque]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext reordered_opaque]}


function name is SetReorderedOpaque 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetReorderedOpaque]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [opaque int64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext reordered_opaque]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int64_t opaque]}


function name is DCTAlgorithm 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context DCTAlgorithm]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [DCTAlgorithm]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [DCTAlgorithm]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dct_algo]}


function name is SetDCTAlgorithm 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetDCTAlgorithm]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [algo DCTAlgorithm]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext dct_algo]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int algo]}


function name is IDCTAlgorithm 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context IDCTAlgorithm]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [IDCTAlgorithm]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [IDCTAlgorithm]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext idct_algo]}


function name is SetIDCTAlgorithm 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetIDCTAlgorithm]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [algo IDCTAlgorithm]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext idct_algo]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int algo]}


function name is BitsPerCodedSample 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BitsPerCodedSample]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bits_per_coded_sample]}


function name is SetBitsPerCodedSample 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBitsPerCodedSample]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bits_per_coded_sample]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is BitsPerRawSample 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context BitsPerRawSample]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bits_per_raw_sample]}


function name is SetBitsPerRawSample 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetBitsPerRawSample]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [bits int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext bits_per_raw_sample]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int bits]}


function name is LowRes 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context LowRes]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext lowres]}


function name is SetLowRes 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetLowRes]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [res int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext lowres]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int res]}


function name is ThreadCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ThreadCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_count]}


function name is SetThreadCount 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetThreadCount]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_count]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is ThreadType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ThreadType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [ThreadType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [ThreadType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_type]}


function name is SetThreadType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetThreadType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [threadType ThreadType]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_type]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int threadType]}


function name is ActiveThreadType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ActiveThreadType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [ThreadType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [ThreadType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext active_thread_type]}


function name is SetActiveThreadType 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetActiveThreadType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [threadType ThreadType]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext active_thread_type]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int threadType]}


function name is ThreadSafeCallbacks 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context ThreadSafeCallbacks]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_safe_callbacks]}


function name is SetThreadSafeCallbacks 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetThreadSafeCallbacks]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [count int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext thread_safe_callbacks]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int count]}


function name is NSSEWeight 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context NSSEWeight]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext nsse_weight]}


function name is SetNSSEWeight 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetNSSEWeight]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [weight int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext nsse_weight]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int weight]}


function name is Profile 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Profile]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext profile]}


function name is SetProfile 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetProfile]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [profile int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext profile]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int profile]}


function name is Level 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context Level]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext level]}


function name is SetLevel 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetLevel]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [level int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext level]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int level]}


function name is SubtitleHeaderSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SubtitleHeaderSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext subtitle_header_size]}


function name is SetSubtitleHeaderSize 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSubtitleHeaderSize]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [size int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext subtitle_header_size]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int size]}


function name is VBVDelay 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context VBVDelay]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [uint64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [uint64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext vbv_delay]}


function name is SetVBVDelay 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetVBVDelay]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [delay uint64]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext vbv_delay]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C uint64_t delay]}


function name is SideDataOnlyPackets 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SideDataOnlyPackets]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.BinaryExpr [!=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext side_data_only_packets]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 0]}


function name is SetSideDataOnlyPackets 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSideDataOnlyPackets]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [sideDataOnly bool]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cSideDataOnly]}
	 {*ast.SelectorExpr [C int]}
	 {*ast.IfStmt [sideDataOnly]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cSideDataOnly]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext side_data_only_packets cSideDataOnly]}


function name is InitialPadding 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context InitialPadding]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext initial_padding]}


function name is SetInitialPadding 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetInitialPadding]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [initialPadding int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext initial_padding]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int initialPadding]}


function name is FrameRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context FrameRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil NewRationalFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext framerate]}


function name is SetFrameRate 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetFrameRate]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [frameRate]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil Rational]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext framerate num]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [frameRate Numerator]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext framerate den]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [frameRate Denominator]}


function name is PTSCorrectionLastPTS 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PTSCorrectionLastPTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pts_correction_last_pts]}


function name is PTSCorrectionLastDTS 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context PTSCorrectionLastDTS]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int64]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int64]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext pts_correction_last_dts]}


function name is SubtitlesEncoding 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SubtitlesEncoding]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sub_charenc]}


function name is SubtitlesEncodingMode 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SubtitlesEncodingMode]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [SubtitlesEncodingMode]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [SubtitlesEncodingMode]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sub_charenc_mode]}


function name is SetSubtitlesEncodingMode 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSubtitlesEncodingMode]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [mode SubtitlesEncodingMode]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext sub_charenc_mode]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int mode]}


function name is SkipAlpha 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SkipAlpha]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.BinaryExpr [!=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_alpha]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 0]}


function name is SetSkipAlpha 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSkipAlpha]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [skip bool]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [cSkip]}
	 {*ast.SelectorExpr [C int]}
	 {*ast.IfStmt [skip]}
	 {*ast.BlockStmt -> *ast.AssignStmt [= cSkip]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext skip_alpha cSkip]}


function name is SeekPreRoll 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SeekPreRoll]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [int]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [int]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext seek_preroll]}


function name is SetSeekPreRoll 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetSeekPreRoll]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [seek int]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext seek_preroll]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int seek]}


function name is CodecWhitelist 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context CodecWhitelist]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType [string]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringSplit]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext codec_whitelist]}
	 {*ast.BasicLit [STRING ","]}


function name is StatsIn 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context StatsIn]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType [byte]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_in nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.AssignStmt [:= length]}
	 {*ast.CallExpr [int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C strlen]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_in]}
	 {*ast.ReturnStmt -> *ast.SliceExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType []}
	 {*ast.BinaryExpr [<<]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.BasicLit [INT 30]}
	 { [byte]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_in length length]}


function name is SetStatsIn 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetStatsIn]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [in]}
	 {*ast.ArrayType [byte]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C av_freep]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_in]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.CallExpr [len in]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.AssignStmt [:= length]}
	 {*ast.CallExpr [len in]}
	 {*ast.AssignStmt [:= cIn]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C char]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C av_malloc]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C size_t]}
	 {*ast.BinaryExpr [+ length]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cIn nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [ErrAllocationError]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [>]}
	 {*ast.CallExpr [len in]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C memcpy]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cIn]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.IndexExpr [in]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C size_t length]}
	 {*ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C memset]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BinaryExpr [+]}
	 {*ast.CallExpr [uintptr]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cIn]}
	 {*ast.CallExpr [uintptr length]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_in cIn]}
	 {*ast.ReturnStmt [nil]}


function name is StatsOut 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context StatsOut]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType [byte]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_out nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.AssignStmt [:= length]}
	 {*ast.CallExpr [int]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C strlen]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_out]}
	 {*ast.ReturnStmt -> *ast.SliceExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.ArrayType []}
	 {*ast.BinaryExpr [<<]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.BasicLit [INT 30]}
	 { [byte]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_out length length]}


function name is SetStatsOut 
	 {*ast.FieldList -> *ast.Field [ctx]}
	 {*ast.StarExpr [Context SetStatsOut]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [out]}
	 {*ast.ArrayType [byte]}
	 {*ast.FieldList -> *ast.Field [error]}
	 {*ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C av_freep]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_out]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.CallExpr [len out]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.AssignStmt [:= length]}
	 {*ast.CallExpr [len out]}
	 {*ast.AssignStmt [:= cOut]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C char]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C av_malloc]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C size_t]}
	 {*ast.BinaryExpr [+ length]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cOut nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [ErrAllocationError]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [>]}
	 {*ast.CallExpr [len out]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BlockStmt -> *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C memcpy]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cOut]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.IndexExpr [out]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C size_t length]}
	 {*ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr [C memset]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.BinaryExpr [+]}
	 {*ast.CallExpr [uintptr]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cOut]}
	 {*ast.CallExpr [uintptr length]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.AssignStmt [=]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [ctx CAVCodecContext stats_out cOut]}
	 {*ast.ReturnStmt [nil]}


function name is cStringToStringOk 
	 { [cStringToStringOk]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [cStr]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C char]}
	 {*ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [== cStr nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.BasicLit [STRING ""]}
	 { [false]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [C GoString cStr true]}


function name is cStringSplit 
	 { [cStringSplit]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [cStr]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C char]}
	 {*ast.Field [sep string]}
	 {*ast.FieldList -> *ast.Field -> *ast.ArrayType [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= str ok]}
	 {*ast.CallExpr [cStringToStringOk cStr]}
	 {*ast.IfStmt []}
	 {*ast.UnaryExpr [! ok]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [strings Split str sep]}


{*ast.GenDecl -> *ast.TypeSpec [CodecDescriptor]}
{*ast.StructType -> *ast.FieldList -> *ast.Field [CAVCodecDescriptor]}
{*ast.StarExpr -> *ast.SelectorExpr [C AVCodecDescriptor]}


function name is NewCodecDescriptorFromC 
	 { [NewCodecDescriptorFromC]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [cCodec unsafe Pointer]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [CodecDescriptor]}
	 {*ast.BlockStmt -> *ast.ReturnStmt []}
	 {*ast.UnaryExpr [&]}
	 {*ast.CompositeLit [CodecDescriptor]}
	 {*ast.KeyValueExpr [CAVCodecDescriptor]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C AVCodecDescriptor cCodec]}


function name is ID 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor ID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [CodecID]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [CodecID]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor id]}


function name is CodecType 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor CodecType]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [avutil MediaType]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor _type]}


function name is Name 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor Name]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= str _]}
	 {*ast.CallExpr -> *ast.SelectorExpr [c NameOk]}
	 {*ast.ReturnStmt [str]}


function name is NameOk 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor NameOk]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor name]}


function name is LongName 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor LongName]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= str _]}
	 {*ast.CallExpr -> *ast.SelectorExpr [c LongNameOk]}
	 {*ast.ReturnStmt [str]}


function name is LongNameOk 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor LongNameOk]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [string]}
	 {*ast.Field [bool]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [cStringToStringOk]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor long_name]}


function name is Props 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor Props]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field [CodecProps]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr [CodecProps]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor props]}


function name is MimeTypes 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor MimeTypes]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType [string]}
	 {*ast.BlockStmt -> *ast.IfStmt []}
	 {*ast.BinaryExpr [==]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor mime_types nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.GenDecl -> *ast.ValueSpec [mimeTypes]}
	 {*ast.ArrayType [string]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= mimeType]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C get_list_at]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor mime_types]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== mimeType nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= mimeTypes]}
	 {*ast.CallExpr [append mimeTypes]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C GoString mimeType]}
	 {*ast.ReturnStmt [mimeTypes]}


function name is Profiles 
	 {*ast.FieldList -> *ast.Field [c]}
	 {*ast.StarExpr [CodecDescriptor Profiles]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.StarExpr [Profile]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [profiles]}
	 {*ast.ArrayType -> *ast.StarExpr [Profile]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cProfile]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C go_av_profile_get]}
	 {*ast.SelectorExpr -> *ast.SelectorExpr [c CAVCodecDescriptor profiles]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C int i]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [||]}
	 {*ast.BinaryExpr [== cProfile nil]}
	 {*ast.BinaryExpr [==]}
	 {*ast.CallExpr [int]}
	 {*ast.SelectorExpr [cProfile profile ProfileUnknown]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [:= profile]}
	 {*ast.CallExpr [NewProfileFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cProfile]}
	 {*ast.AssignStmt [= profiles]}
	 {*ast.CallExpr [append profiles profile]}
	 {*ast.ReturnStmt [profiles]}


function name is CodecDescriptorByID 
	 { [CodecDescriptorByID]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [codecID CodecID]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [CodecDescriptor]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cCodecDescriptor]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_descriptor_get]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVCodecID codecID]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodecDescriptor nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecDescriptorFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodecDescriptor]}


function name is CodecDescriptorByName 
	 { [CodecDescriptorByName]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [name string]}
	 {*ast.FieldList -> *ast.Field -> *ast.StarExpr [CodecDescriptor]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cName]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C CString name]}
	 {*ast.DeferStmt -> *ast.CallExpr -> *ast.SelectorExpr [C free]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cName]}
	 {*ast.AssignStmt [:= cCodecDescriptor]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_descriptor_get_by_name cName]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== cCodecDescriptor nil]}
	 {*ast.BlockStmt -> *ast.ReturnStmt [nil]}
	 {*ast.ReturnStmt -> *ast.CallExpr [NewCodecDescriptorFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer cCodecDescriptor]}


function name is CodecDescriptors 
	 { [CodecDescriptors]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.FieldList -> *ast.Field -> *ast.ArrayType -> *ast.StarExpr [CodecDescriptor]}
	 {*ast.BlockStmt -> *ast.GenDecl -> *ast.ValueSpec [prev]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C AVCodecDescriptor]}
	 {*ast.GenDecl -> *ast.ValueSpec [descriptors]}
	 {*ast.ArrayType -> *ast.StarExpr [CodecDescriptor]}
	 {*ast.ForStmt -> *ast.BlockStmt -> *ast.AssignStmt [= prev]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_descriptor_next prev]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [== prev nil]}
	 {*ast.BlockStmt -> *ast.BranchStmt -> *ast.AssignStmt [= descriptors]}
	 {*ast.CallExpr [append descriptors]}
	 {*ast.CallExpr [NewCodecDescriptorFromC]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer prev]}
	 {*ast.ReturnStmt [descriptors]}


function name is FindBestPixelFormat 
	 { [FindBestPixelFormat]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [list]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [src]}
	 {*ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [alpha bool]}
	 {*ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= best]}
	 {*ast.CallExpr [findBestPixelFormatWithLossFlags list src alpha nil]}
	 {*ast.ReturnStmt [best]}


function name is FindBestPixelFormatWithLossFlags 
	 { [FindBestPixelFormatWithLossFlags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [list]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [src]}
	 {*ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [alpha bool]}
	 {*ast.Field [lossFlags]}
	 {*ast.SelectorExpr [avutil LossFlags]}
	 {*ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field -> *ast.SelectorExpr [avutil LossFlags]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= best]}
	 {*ast.CallExpr [findBestPixelFormatWithLossFlags list src alpha]}
	 {*ast.UnaryExpr [& lossFlags]}
	 {*ast.ReturnStmt [best lossFlags]}


function name is findBestPixelFormatWithLossFlags 
	 { [findBestPixelFormatWithLossFlags]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [list]}
	 {*ast.ArrayType -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [src]}
	 {*ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.Field [alpha bool]}
	 {*ast.Field [lossFlags]}
	 {*ast.StarExpr -> *ast.SelectorExpr [avutil LossFlags]}
	 {*ast.FieldList -> *ast.Field -> *ast.SelectorExpr [avutil PixelFormat]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= size]}
	 {*ast.CallExpr [len list]}
	 {*ast.AssignStmt [:= value]}
	 {*ast.CallExpr [make]}
	 {*ast.ArrayType -> *ast.SelectorExpr [C enum_AVPixelFormat]}
	 {*ast.BinaryExpr [+ size]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.BinaryExpr [+ size]}
	 {*ast.BasicLit [INT 1]}
	 {*ast.ForStmt -> *ast.AssignStmt [:= i]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.BinaryExpr [< i size]}
	 {*ast.IncDecStmt [i]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.IndexExpr [value i]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C enum_AVPixelFormat]}
	 {*ast.IndexExpr [list i]}
	 {*ast.AssignStmt [=]}
	 {*ast.IndexExpr [value size]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C enum_AVPixelFormat]}
	 {*ast.SelectorExpr [avutil PixelFormatNone]}
	 {*ast.AssignStmt [:= cList]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr [C enum_AVPixelFormat]}
	 {*ast.CallExpr -> *ast.SelectorExpr [unsafe Pointer]}
	 {*ast.UnaryExpr [&]}
	 {*ast.IndexExpr [value]}
	 {*ast.BasicLit [INT 0]}
	 {*ast.AssignStmt [:= cSrc]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C enum_AVPixelFormat src]}
	 {*ast.AssignStmt [:= cAlpha]}
	 {*ast.CallExpr [boolToCInt alpha]}
	 {*ast.GenDecl -> *ast.ValueSpec [cLossFlags]}
	 {*ast.StarExpr -> *ast.SelectorExpr [C int]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= lossFlags nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [:= cLossFlagsVal]}
	 {*ast.CallExpr -> *ast.ParenExpr -> *ast.SelectorExpr [C int]}
	 {*ast.StarExpr [lossFlags]}
	 {*ast.AssignStmt [= cLossFlags]}
	 {*ast.UnaryExpr [& cLossFlagsVal]}
	 {*ast.AssignStmt [:= best]}
	 {*ast.CallExpr -> *ast.SelectorExpr [C avcodec_find_best_pix_fmt_of_list cList cSrc cAlpha cLossFlags]}
	 {*ast.IfStmt []}
	 {*ast.BinaryExpr [!= lossFlags nil]}
	 {*ast.BlockStmt -> *ast.AssignStmt [=]}
	 {*ast.StarExpr [lossFlags]}
	 {*ast.CallExpr -> *ast.SelectorExpr [avutil LossFlags]}
	 {*ast.StarExpr [cLossFlags]}
	 {*ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr [avutil PixelFormat best]}


function name is boolToCInt 
	 { [boolToCInt]}
	 {*ast.FuncType -> *ast.FieldList -> *ast.Field [b bool]}
	 {*ast.FieldList -> *ast.Field -> *ast.SelectorExpr [C int]}
	 {*ast.BlockStmt -> *ast.IfStmt [b]}
	 {*ast.BlockStmt -> *ast.ReturnStmt -> *ast.BasicLit [INT 1]}
	 {*ast.ReturnStmt -> *ast.BasicLit [INT 0]}



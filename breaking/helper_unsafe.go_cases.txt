function name: isEmptyValueFallbackRecur
   0.case
     *ast.SelectorExpr 	 [reflect Invalid]
     *ast.ReturnStmt 	 [true]
   1.case
     *ast.SelectorExpr 	 [reflect String]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.SelectorExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== unsafeString]
     *ast.SelectorExpr 	 [urv ptr]
      	 [Len]
     *ast.BasicLit 	 [INT 0]
   2.case
     *ast.SelectorExpr 	 [reflect Slice]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.SelectorExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== unsafeSlice]
     *ast.SelectorExpr 	 [urv ptr]
      	 [Len]
     *ast.BasicLit 	 [INT 0]
   3.case
     *ast.SelectorExpr 	 [reflect Bool]
     *ast.ReturnStmt -> *ast.UnaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [! bool]
     *ast.SelectorExpr 	 [urv ptr]
   4.case
     *ast.SelectorExpr 	 [reflect Int]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== int]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   5.case
     *ast.SelectorExpr 	 [reflect Int8]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== int8]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   6.case
     *ast.SelectorExpr 	 [reflect Int16]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== int16]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   7.case
     *ast.SelectorExpr 	 [reflect Int32]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== int32]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   8.case
     *ast.SelectorExpr 	 [reflect Int64]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== int64]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   9.case
     *ast.SelectorExpr 	 [reflect Uint]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uint]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   10.case
     *ast.SelectorExpr 	 [reflect Uint8]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uint8]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   11.case
     *ast.SelectorExpr 	 [reflect Uint16]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uint16]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   12.case
     *ast.SelectorExpr 	 [reflect Uint32]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uint32]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   13.case
     *ast.SelectorExpr 	 [reflect Uint64]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uint64]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   14.case
     *ast.SelectorExpr 	 [reflect Uintptr]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== uintptr]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   15.case
     *ast.SelectorExpr 	 [reflect Float32]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== float32]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   16.case
     *ast.SelectorExpr 	 [reflect Float64]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr 	 [== float64]
     *ast.SelectorExpr 	 [urv ptr]
     *ast.BasicLit 	 [INT 0]
   17.case
     *ast.SelectorExpr 	 [reflect Complex64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [unsafeCmpZero urv ptr]
     *ast.BasicLit 	 [INT 8]
   18.case
     *ast.SelectorExpr 	 [reflect Complex128]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [unsafeCmpZero urv ptr]
     *ast.BasicLit 	 [INT 16]
   19.case
     *ast.SelectorExpr 	 [reflect Struct]
     *ast.IfStmt -> *ast.BinaryExpr 	 [== tinfos nil]
     *ast.BlockStmt -> *ast.AssignStmt 	 [= tinfos defTypeInfos]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= ti tinfos find]
     *ast.CallExpr -> *ast.SelectorExpr 	 [uintptr urv typ]
     *ast.IfStmt -> *ast.BinaryExpr 	 [== ti nil]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= ti tinfos load]
     *ast.CallExpr -> *ast.SelectorExpr 	 [v Type]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [unsafeCmpZero urv ptr]
     *ast.CallExpr -> *ast.SelectorExpr 	 [int ti size]
   20.case
     *ast.SelectorExpr 	 [reflect Interface]
     *ast.SelectorExpr 	 [reflect Ptr]
     *ast.AssignStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.SelectorExpr 	 [:= isnil || == urv ptr]
      	 [nil]
     *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr 	 [== unsafe Pointer]
     *ast.SelectorExpr 	 [urv ptr]
      	 [nil]
     *ast.IfStmt -> *ast.BinaryExpr -> *ast.UnaryExpr 	 [&& recursive ! isnil]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [isEmptyValue v Elem]
      	 [tinfos recursive]
     *ast.ReturnStmt 	 [isnil]
   21.case
     *ast.SelectorExpr 	 [reflect UnsafePointer]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.SelectorExpr 	 [|| == urv ptr]
      	 [nil]
     *ast.BinaryExpr -> *ast.StarExpr -> *ast.CallExpr -> *ast.ParenExpr -> *ast.StarExpr -> *ast.SelectorExpr 	 [== unsafe Pointer]
     *ast.SelectorExpr 	 [urv ptr]
      	 [nil]
   22.case
     *ast.SelectorExpr 	 [reflect Chan]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.SelectorExpr 	 [|| == urv ptr]
      	 [nil]
     *ast.BinaryExpr -> *ast.CallExpr -> *ast.CallExpr 	 [== len_chan rvRefPtr urv]
     *ast.BasicLit 	 [INT 0]
   23.case
     *ast.SelectorExpr 	 [reflect Map]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.SelectorExpr 	 [|| == urv ptr]
      	 [nil]
     *ast.BinaryExpr -> *ast.CallExpr -> *ast.CallExpr 	 [== len_map rvRefPtr urv]
     *ast.BasicLit 	 [INT 0]
   24.case
     *ast.SelectorExpr 	 [reflect Array]
     *ast.ReturnStmt -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [|| || || || == v Len]
     *ast.BasicLit 	 [INT 0]
     *ast.BinaryExpr -> *ast.SelectorExpr 	 [== urv ptr]
      	 [nil]
     *ast.BinaryExpr -> *ast.SelectorExpr 	 [== urv typ]
      	 [nil]
     *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [== rtsize2 urv typ]
     *ast.BasicLit 	 [INT 0]
     *ast.CallExpr -> *ast.SelectorExpr 	 [unsafeCmpZero urv ptr]
     *ast.CallExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [int rtsize2 urv typ]


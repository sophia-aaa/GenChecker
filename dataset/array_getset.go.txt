function name is Set { [tensor]}
{BasicLit -> BasicLit -> BasicLit -> BasicLit -> BasicLit -> FieldList [a]}
{StarExpr -> SelectorExpr [main array Set]}
{FieldList [i int x]}
{InterfaceType -> FieldList -> BlockStmt -> SwitchStmt -> CallExpr -> SelectorExpr -> SelectorExpr [a t Kind]}
{BlockStmt -> CaseClause -> SelectorExpr [reflect Bool]}
{AssignStmt [xv x bool]}
{CallExpr -> SelectorExpr [a SetB i xv]}
{CaseClause -> SelectorExpr [reflect Int]}
{AssignStmt [xv x int]}
{CallExpr -> SelectorExpr [a SetI i xv]}
{CaseClause -> SelectorExpr [reflect Int8]}
{AssignStmt [xv x int8]}
{CallExpr -> SelectorExpr [a SetI8 i xv]}
{CaseClause -> SelectorExpr [reflect Int16]}
{AssignStmt [xv x int16]}
{CallExpr -> SelectorExpr [a SetI16 i xv]}
{CaseClause -> SelectorExpr [reflect Int32]}
{AssignStmt [xv x int32]}
{CallExpr -> SelectorExpr [a SetI32 i xv]}
{CaseClause -> SelectorExpr [reflect Int64]}
{AssignStmt [xv x int64]}
{CallExpr -> SelectorExpr [a SetI64 i xv]}
{CaseClause -> SelectorExpr [reflect Uint]}
{AssignStmt [xv x uint]}
{CallExpr -> SelectorExpr [a SetU i xv]}
{CaseClause -> SelectorExpr [reflect Uint8]}
{AssignStmt [xv x uint8]}
{CallExpr -> SelectorExpr [a SetU8 i xv]}
{CaseClause -> SelectorExpr [reflect Uint16]}
{AssignStmt [xv x uint16]}
{CallExpr -> SelectorExpr [a SetU16 i xv]}
{CaseClause -> SelectorExpr [reflect Uint32]}
{AssignStmt [xv x uint32]}
{CallExpr -> SelectorExpr [a SetU32 i xv]}
{CaseClause -> SelectorExpr [reflect Uint64]}
{AssignStmt [xv x uint64]}
{CallExpr -> SelectorExpr [a SetU64 i xv]}
{CaseClause -> SelectorExpr [reflect Uintptr]}
{AssignStmt [xv x uintptr]}
{CallExpr -> SelectorExpr [a SetUintptr i xv]}
{CaseClause -> SelectorExpr [reflect Float32]}
{AssignStmt [xv x float32]}
{CallExpr -> SelectorExpr [a SetF32 i xv]}
{CaseClause -> SelectorExpr [reflect Float64]}
{AssignStmt [xv x float64]}
{CallExpr -> SelectorExpr [a SetF64 i xv]}
{CaseClause -> SelectorExpr [reflect Complex64]}
{AssignStmt [xv x complex64]}
{CallExpr -> SelectorExpr [a SetC64 i xv]}
{CaseClause -> SelectorExpr [reflect Complex128]}
{AssignStmt [xv x complex128]}
{CallExpr -> SelectorExpr [a SetC128 i xv]}
{CaseClause -> SelectorExpr [reflect String]}
{AssignStmt [xv x string]}
{CallExpr -> SelectorExpr [a SetStr i xv]}
{CaseClause -> SelectorExpr [reflect UnsafePointer]}
{AssignStmt [xv x]}
{SelectorExpr [unsafe Pointer]}
{CallExpr -> SelectorExpr [a SetUnsafePointer i xv]}
{CaseClause -> AssignStmt [xv]}
{CallExpr -> SelectorExpr [reflect ValueOf x]}
{AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect NewAt]}
{SelectorExpr -> SelectorExpr [a t Type]}
{CallExpr -> SelectorExpr [storage ElementAt i]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [a Header Raw]}
{BasicLit -> CallExpr -> SelectorExpr -> SelectorExpr [a t Size]}
{AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect Indirect val]}
{CallExpr -> SelectorExpr [val Set xv]}


function name is Get {FieldList [a]}
{StarExpr -> SelectorExpr [main array Get]}
{FieldList [i int]}
{FieldList -> InterfaceType -> FieldList -> BlockStmt -> SwitchStmt -> CallExpr -> SelectorExpr -> SelectorExpr [a t Kind]}
{BlockStmt -> CaseClause -> SelectorExpr [reflect Bool]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetB i]}
{CaseClause -> SelectorExpr [reflect Int]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetI i]}
{CaseClause -> SelectorExpr [reflect Int8]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetI8 i]}
{CaseClause -> SelectorExpr [reflect Int16]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetI16 i]}
{CaseClause -> SelectorExpr [reflect Int32]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetI32 i]}
{CaseClause -> SelectorExpr [reflect Int64]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetI64 i]}
{CaseClause -> SelectorExpr [reflect Uint]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetU i]}
{CaseClause -> SelectorExpr [reflect Uint8]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetU8 i]}
{CaseClause -> SelectorExpr [reflect Uint16]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetU16 i]}
{CaseClause -> SelectorExpr [reflect Uint32]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetU32 i]}
{CaseClause -> SelectorExpr [reflect Uint64]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetU64 i]}
{CaseClause -> SelectorExpr [reflect Uintptr]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetUintptr i]}
{CaseClause -> SelectorExpr [reflect Float32]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetF32 i]}
{CaseClause -> SelectorExpr [reflect Float64]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetF64 i]}
{CaseClause -> SelectorExpr [reflect Complex64]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetC64 i]}
{CaseClause -> SelectorExpr [reflect Complex128]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetC128 i]}
{CaseClause -> SelectorExpr [reflect String]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetStr i]}
{CaseClause -> SelectorExpr [reflect UnsafePointer]}
{ReturnStmt -> CallExpr -> SelectorExpr [a GetUnsafePointer i]}
{CaseClause -> AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect NewAt]}
{SelectorExpr -> SelectorExpr [a t Type]}
{CallExpr -> SelectorExpr [storage ElementAt i]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [a Header Raw]}
{BasicLit -> CallExpr -> SelectorExpr -> SelectorExpr [a t Size]}
{AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect Indirect val]}
{ReturnStmt -> CallExpr -> SelectorExpr [val Interface]}


function name is Memset {FieldList [a]}
{StarExpr -> SelectorExpr [main array Memset]}
{FieldList [x]}
{InterfaceType -> FieldList -> FieldList [error]}
{BlockStmt -> SwitchStmt -> SelectorExpr [a t]}
{BlockStmt -> CaseClause [Bool]}
{AssignStmt [xv ok x bool ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Bools i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Int]}
{AssignStmt [xv ok x int ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Ints i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Int8]}
{AssignStmt [xv ok x int8 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int8s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Int16]}
{AssignStmt [xv ok x int16 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int16s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Int32]}
{AssignStmt [xv ok x int32 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int32s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Int64]}
{AssignStmt [xv ok x int64 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int64s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uint]}
{AssignStmt [xv ok x uint ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uints i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uint8]}
{AssignStmt [xv ok x uint8 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint8s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uint16]}
{AssignStmt [xv ok x uint16 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint16s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uint32]}
{AssignStmt [xv ok x uint32 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint32s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uint64]}
{AssignStmt [xv ok x uint64 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint64s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Uintptr]}
{AssignStmt [xv ok x uintptr ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uintptrs i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Float32]}
{AssignStmt [xv ok x float32 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Float32s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Float64]}
{AssignStmt [xv ok x float64 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Float64s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Complex64]}
{AssignStmt [xv ok x complex64 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Complex64s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [Complex128]}
{AssignStmt [xv ok x complex128 ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Complex128s i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [String]}
{AssignStmt [xv ok x string ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a Strings i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{CaseClause [UnsafePointer]}
{AssignStmt [xv ok x]}
{SelectorExpr [unsafe Pointer ok]}
{BlockStmt -> AssignStmt [data]}
{CallExpr -> SelectorExpr [a UnsafePointers i data]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{ReturnStmt [nil]}
{AssignStmt [xv]}
{CallExpr -> SelectorExpr [reflect ValueOf x]}
{AssignStmt [l]}
{CallExpr -> SelectorExpr [a Len]}
{AssignStmt [i]}
{BasicLit [i l i]}
{BlockStmt -> AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect NewAt]}
{SelectorExpr -> SelectorExpr [a t Type]}
{CallExpr -> SelectorExpr [storage ElementAt i]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [a Header Raw]}
{BasicLit -> CallExpr -> SelectorExpr -> SelectorExpr [a t Size]}
{AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect Indirect val]}
{CallExpr -> SelectorExpr [val Set xv]}
{ReturnStmt [nil]}


function name is Eq {FieldList [a]}
{StarExpr -> SelectorExpr [main array memsetIter]}
{FieldList [x]}
{InterfaceType -> FieldList [it Iterator]}
{FieldList [err error]}
{BlockStmt -> DeclStmt [i int]}
{SwitchStmt -> SelectorExpr [a t]}
{BlockStmt -> CaseClause [Bool]}
{AssignStmt [xv ok x bool ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Bools]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Int]}
{AssignStmt [xv ok x int ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Ints]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Int8]}
{AssignStmt [xv ok x int8 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int8s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Int16]}
{AssignStmt [xv ok x int16 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int16s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Int32]}
{AssignStmt [xv ok x int32 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int32s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Int64]}
{AssignStmt [xv ok x int64 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Int64s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uint]}
{AssignStmt [xv ok x uint ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uints]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uint8]}
{AssignStmt [xv ok x uint8 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint8s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uint16]}
{AssignStmt [xv ok x uint16 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint16s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uint32]}
{AssignStmt [xv ok x uint32 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint32s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uint64]}
{AssignStmt [xv ok x uint64 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uint64s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Uintptr]}
{AssignStmt [xv ok x uintptr ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Uintptrs]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Float32]}
{AssignStmt [xv ok x float32 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Float32s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Float64]}
{AssignStmt [xv ok x float64 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Float64s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Complex64]}
{AssignStmt [xv ok x complex64 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Complex64s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [Complex128]}
{AssignStmt [xv ok x complex128 ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Complex128s]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [String]}
{AssignStmt [xv ok x string ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a Strings]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause [UnsafePointer]}
{AssignStmt [xv ok x]}
{SelectorExpr [unsafe Pointer ok]}
{BlockStmt -> ReturnStmt -> CallExpr -> SelectorExpr [errors Errorf dtypeMismatch]}
{SelectorExpr [a t x]}
{AssignStmt [data]}
{CallExpr -> SelectorExpr [a UnsafePointers]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt -> IndexExpr [data i xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{CaseClause -> AssignStmt [xv]}
{CallExpr -> SelectorExpr [reflect ValueOf x]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next err nil]}
{AssignStmt [i err]}
{CallExpr -> SelectorExpr [it Next]}
{BlockStmt -> AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect NewAt]}
{SelectorExpr -> SelectorExpr [a t Type]}
{CallExpr -> SelectorExpr [storage ElementAt i]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [a Header Raw]}
{BasicLit -> CallExpr -> SelectorExpr -> SelectorExpr [a t Size]}
{AssignStmt [val]}
{CallExpr -> SelectorExpr [reflect Indirect val]}
{CallExpr -> SelectorExpr [val Set xv]}
{AssignStmt [err]}
{CallExpr [handleNoOp err]}
{ReturnStmt -> FieldList [a]}
{SelectorExpr [main array Eq]}
{FieldList [other]}
{InterfaceType -> FieldList -> FieldList [bool]}
{BlockStmt -> AssignStmt [oa ok other]}
{StarExpr -> SelectorExpr [main array ok]}
{BlockStmt -> SelectorExpr [oa t]}
{SelectorExpr [a t]}
{BlockStmt -> ReturnStmt [false]}
{CallExpr -> SelectorExpr [oa Len]}
{CallExpr -> SelectorExpr [a Len]}
{BlockStmt -> ReturnStmt [false]}
{CallExpr [uintptr]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [oa Header Raw]}
{BasicLit -> CallExpr [uintptr]}
{CallExpr -> SelectorExpr [unsafe Pointer]}
{IndexExpr -> SelectorExpr -> SelectorExpr [a Header Raw]}
{BasicLit -> BlockStmt -> ReturnStmt [true]}
{SwitchStmt -> CallExpr -> SelectorExpr -> SelectorExpr [a t Kind]}
{BlockStmt -> CaseClause -> SelectorExpr [reflect Bool i v]}
{CallExpr -> SelectorExpr [a Bools]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetB i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Int i v]}
{CallExpr -> SelectorExpr [a Ints]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetI i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Int8 i v]}
{CallExpr -> SelectorExpr [a Int8s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetI8 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Int16 i v]}
{CallExpr -> SelectorExpr [a Int16s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetI16 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Int32 i v]}
{CallExpr -> SelectorExpr [a Int32s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetI32 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Int64 i v]}
{CallExpr -> SelectorExpr [a Int64s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetI64 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uint i v]}
{CallExpr -> SelectorExpr [a Uints]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetU i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uint8 i v]}
{CallExpr -> SelectorExpr [a Uint8s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetU8 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uint16 i v]}
{CallExpr -> SelectorExpr [a Uint16s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetU16 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uint32 i v]}
{CallExpr -> SelectorExpr [a Uint32s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetU32 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uint64 i v]}
{CallExpr -> SelectorExpr [a Uint64s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetU64 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Uintptr i v]}
{CallExpr -> SelectorExpr [a Uintptrs]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetUintptr i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Float32 i v]}
{CallExpr -> SelectorExpr [a Float32s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetF32 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Float64 i v]}
{CallExpr -> SelectorExpr [a Float64s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetF64 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Complex64 i v]}
{CallExpr -> SelectorExpr [a Complex64s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetC64 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect Complex128 i v]}
{CallExpr -> SelectorExpr [a Complex128s]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetC128 i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect String i v]}
{CallExpr -> SelectorExpr [a Strings]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetStr i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> SelectorExpr [reflect UnsafePointer i v]}
{CallExpr -> SelectorExpr [a UnsafePointers]}
{BlockStmt -> CallExpr -> SelectorExpr [oa GetUnsafePointer i v]}
{BlockStmt -> ReturnStmt [false]}
{CaseClause -> AssignStmt [i]}
{BasicLit [i]}
{CallExpr -> SelectorExpr [a Len i]}
{BlockStmt -> CallExpr -> SelectorExpr [reflect DeepEqual]}
{CallExpr -> SelectorExpr [a Get i]}
{CallExpr -> SelectorExpr [oa Get i]}
{BlockStmt -> ReturnStmt [false]}
{ReturnStmt [true]}
{ReturnStmt [false]}



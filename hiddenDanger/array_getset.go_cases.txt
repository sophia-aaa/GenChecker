function name: Set
   0.case
     *ast.SelectorExpr 	 [reflect Bool]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x bool]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetB]
      	 [i xv]
   1.case
     *ast.SelectorExpr 	 [reflect Int]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x int]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetI]
      	 [i xv]
   2.case
     *ast.SelectorExpr 	 [reflect Int8]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x int8]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetI8]
      	 [i xv]
   3.case
     *ast.SelectorExpr 	 [reflect Int16]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x int16]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetI16]
      	 [i xv]
   4.case
     *ast.SelectorExpr 	 [reflect Int32]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x int32]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetI32]
      	 [i xv]
   5.case
     *ast.SelectorExpr 	 [reflect Int64]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x int64]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetI64]
      	 [i xv]
   6.case
     *ast.SelectorExpr 	 [reflect Uint]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uint]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetU]
      	 [i xv]
   7.case
     *ast.SelectorExpr 	 [reflect Uint8]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uint8]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetU8]
      	 [i xv]
   8.case
     *ast.SelectorExpr 	 [reflect Uint16]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uint16]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetU16]
      	 [i xv]
   9.case
     *ast.SelectorExpr 	 [reflect Uint32]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uint32]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetU32]
      	 [i xv]
   10.case
     *ast.SelectorExpr 	 [reflect Uint64]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uint64]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetU64]
      	 [i xv]
   11.case
     *ast.SelectorExpr 	 [reflect Uintptr]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x uintptr]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetUintptr]
      	 [i xv]
   12.case
     *ast.SelectorExpr 	 [reflect Float32]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x float32]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetF32]
      	 [i xv]
   13.case
     *ast.SelectorExpr 	 [reflect Float64]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x float64]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetF64]
      	 [i xv]
   14.case
     *ast.SelectorExpr 	 [reflect Complex64]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x complex64]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetC64]
      	 [i xv]
   15.case
     *ast.SelectorExpr 	 [reflect Complex128]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x complex128]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetC128]
      	 [i xv]
   16.case
     *ast.SelectorExpr 	 [reflect String]
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [:= xv x string]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetStr]
      	 [i xv]
   17.case
     *ast.SelectorExpr 	 [reflect UnsafePointer]
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.SelectorExpr 	 [:= xv x unsafe Pointer]
     *ast.ExprStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a SetUnsafePointer]
      	 [i xv]

function name: Get
   0.case
     *ast.SelectorExpr 	 [reflect Bool]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetB]
      	 [i]
   1.case
     *ast.SelectorExpr 	 [reflect Int]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetI]
      	 [i]
   2.case
     *ast.SelectorExpr 	 [reflect Int8]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetI8]
      	 [i]
   3.case
     *ast.SelectorExpr 	 [reflect Int16]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetI16]
      	 [i]
   4.case
     *ast.SelectorExpr 	 [reflect Int32]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetI32]
      	 [i]
   5.case
     *ast.SelectorExpr 	 [reflect Int64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetI64]
      	 [i]
   6.case
     *ast.SelectorExpr 	 [reflect Uint]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetU]
      	 [i]
   7.case
     *ast.SelectorExpr 	 [reflect Uint8]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetU8]
      	 [i]
   8.case
     *ast.SelectorExpr 	 [reflect Uint16]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetU16]
      	 [i]
   9.case
     *ast.SelectorExpr 	 [reflect Uint32]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetU32]
      	 [i]
   10.case
     *ast.SelectorExpr 	 [reflect Uint64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetU64]
      	 [i]
   11.case
     *ast.SelectorExpr 	 [reflect Uintptr]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetUintptr]
      	 [i]
   12.case
     *ast.SelectorExpr 	 [reflect Float32]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetF32]
      	 [i]
   13.case
     *ast.SelectorExpr 	 [reflect Float64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetF64]
      	 [i]
   14.case
     *ast.SelectorExpr 	 [reflect Complex64]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetC64]
      	 [i]
   15.case
     *ast.SelectorExpr 	 [reflect Complex128]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetC128]
      	 [i]
   16.case
     *ast.SelectorExpr 	 [reflect String]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetStr]
      	 [i]
   17.case
     *ast.SelectorExpr 	 [reflect UnsafePointer]
     *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [a GetUnsafePointer]
      	 [i]

function name: Memset
   0.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Bool := xv ok x bool]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Bools]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   1.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int := xv ok x int]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Ints]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   2.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int8 := xv ok x int8]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Int8s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   3.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int16 := xv ok x int16]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Int16s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   4.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int32 := xv ok x int32]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Int32s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   5.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int64 := xv ok x int64]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Int64s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   6.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint := xv ok x uint]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uints]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   7.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint8 := xv ok x uint8]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uint8s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   8.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint16 := xv ok x uint16]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uint16s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   9.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint32 := xv ok x uint32]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uint32s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   10.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint64 := xv ok x uint64]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uint64s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   11.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uintptr := xv ok x uintptr]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Uintptrs]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   12.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Float32 := xv ok x float32]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Float32s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   13.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Float64 := xv ok x float64]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Float64s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   14.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Complex64 := xv ok x complex64]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Complex64s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   15.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Complex128 := xv ok x complex128]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Complex128s]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   16.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr 	 [String := xv ok x string]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a Strings]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]
   17.case
     *ast.IfStmt -> *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.SelectorExpr 	 [UnsafePointer := xv ok x unsafe Pointer]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [ok := data a UnsafePointers]
     *ast.RangeStmt -> *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [i data = data i]
      	 [xv]
     *ast.ReturnStmt 	 [nil]

function name: memsetIter
   0.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Bool := xv ok x bool]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Bools]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   1.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int := xv ok x int]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Ints]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   2.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int8 := xv ok x int8]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Int8s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   3.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int16 := xv ok x int16]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Int16s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   4.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int32 := xv ok x int32]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Int32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   5.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Int64 := xv ok x int64]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Int64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   6.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint := xv ok x uint]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uints]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   7.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint8 := xv ok x uint8]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uint8s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   8.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint16 := xv ok x uint16]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uint16s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   9.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint32 := xv ok x uint32]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uint32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   10.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uint64 := xv ok x uint64]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uint64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   11.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Uintptr := xv ok x uintptr]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Uintptrs]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   12.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Float32 := xv ok x float32]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Float32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   13.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Float64 := xv ok x float64]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Float64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   14.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Complex64 := xv ok x complex64]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Complex64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   15.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [Complex128 := xv ok x complex128]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Complex128s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   16.case
     *ast.AssignStmt -> *ast.TypeAssertExpr 	 [String := xv ok x string]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a Strings]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   17.case
     *ast.AssignStmt -> *ast.TypeAssertExpr -> *ast.SelectorExpr 	 [UnsafePointer := xv ok x unsafe Pointer]
     *ast.IfStmt -> *ast.UnaryExpr 	 [! ok]
     *ast.BlockStmt -> *ast.ReturnStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [errors Errorf]
     *ast.SelectorExpr 	 [dtypeMismatch a t]
      	 [x]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [:= data a UnsafePointers]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [xv]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]

function name: Eq
   0.case
     *ast.SelectorExpr 	 [reflect Bool]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Bools]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetB]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   1.case
     *ast.SelectorExpr 	 [reflect Int]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Ints]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetI]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   2.case
     *ast.SelectorExpr 	 [reflect Int8]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Int8s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetI8]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   3.case
     *ast.SelectorExpr 	 [reflect Int16]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Int16s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetI16]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   4.case
     *ast.SelectorExpr 	 [reflect Int32]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Int32s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetI32]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   5.case
     *ast.SelectorExpr 	 [reflect Int64]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Int64s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetI64]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   6.case
     *ast.SelectorExpr 	 [reflect Uint]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uints]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetU]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   7.case
     *ast.SelectorExpr 	 [reflect Uint8]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uint8s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetU8]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   8.case
     *ast.SelectorExpr 	 [reflect Uint16]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uint16s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetU16]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   9.case
     *ast.SelectorExpr 	 [reflect Uint32]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uint32s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetU32]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   10.case
     *ast.SelectorExpr 	 [reflect Uint64]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uint64s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetU64]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   11.case
     *ast.SelectorExpr 	 [reflect Uintptr]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Uintptrs]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetUintptr]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   12.case
     *ast.SelectorExpr 	 [reflect Float32]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Float32s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetF32]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   13.case
     *ast.SelectorExpr 	 [reflect Float64]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Float64s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetF64]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   14.case
     *ast.SelectorExpr 	 [reflect Complex64]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Complex64s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetC64]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   15.case
     *ast.SelectorExpr 	 [reflect Complex128]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Complex128s]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetC128]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   16.case
     *ast.SelectorExpr 	 [reflect String]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a Strings]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetStr]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]
   17.case
     *ast.SelectorExpr 	 [reflect UnsafePointer]
     *ast.RangeStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [i v a UnsafePointers]
     *ast.BlockStmt -> *ast.IfStmt -> *ast.BinaryExpr -> *ast.CallExpr -> *ast.SelectorExpr 	 [!= oa GetUnsafePointer]
      	 [i]
      	 [v]
     *ast.BlockStmt -> *ast.ReturnStmt 	 [false]

function name: zeroIter
   0.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Bool := data a Bools]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [false]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   1.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Int := data a Ints]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   2.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Int8 := data a Int8s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   3.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Int16 := data a Int16s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   4.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Int32 := data a Int32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   5.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Int64 := data a Int64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   6.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uint := data a Uints]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   7.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uint8 := data a Uint8s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   8.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uint16 := data a Uint16s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   9.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uint32 := data a Uint32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   10.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uint64 := data a Uint64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   11.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Uintptr := data a Uintptrs]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   12.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Float32 := data a Float32s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   13.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Float64 := data a Float64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   14.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Complex64 := data a Complex64s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   15.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [Complex128 := data a Complex128s]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [INT 0]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   16.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [String := data a Strings]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
     *ast.BasicLit 	 [STRING ""]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]
   17.case
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [UnsafePointer := data a UnsafePointers]
     *ast.ForStmt -> *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BinaryExpr 	 [== err nil]
     *ast.AssignStmt -> *ast.CallExpr -> *ast.SelectorExpr 	 [= i err it Next]
     *ast.BlockStmt -> *ast.AssignStmt -> *ast.IndexExpr 	 [= data i]
      	 [nil]
     *ast.AssignStmt -> *ast.CallExpr 	 [= err handleNoOp err]

